//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\workplace\NX\NXDEV2.0\workdir\application\choiceExpression.java
//
//        This file was generated by the NX Block UI Styler
//        Created by: 26069
//              Version: NX 12
//              Date: 06-02-2020  (Format: mm-dd-yyyy)
//              Time: 09:58 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains JAVA source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
import java.io.*;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import nxopen.*;
import nxopen.blockstyler.*;
import static nxopen.NXMessageBox.DialogType.*;
//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public class choiceExpression implements BlockDialog.Initialize, BlockDialog.DialogShown, BlockDialog.Apply, BlockDialog.Ok, BlockDialog.Update
//,SetList.AddCallback
//,SetList.DeleteCallback
//,SetList.ReorderCallback
{
    //class members
    public static Session theSession = null;
    public static UI theUI = null;
    private static String theDlxFileName;
    private static BlockDialog theDialog;
    private static nxopen.blockstyler.Group group;// Block type: Group
    private static SetList expressions;// Block type: Set List
    private static Button add;// Block type: Button
    private static nxopen.blockstyler.Group group1;// Block type: Group
    private static SetList choices;// Block type: Set List
    private static Button remove;// Block type: Button
    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public choiceExpression() throws Exception, RemoteException
    {
        try
        {
            theSession = (Session)SessionFactory.get("Session");
            theUI = (UI)SessionFactory.get("UI");
            theDlxFileName = "choiceExpression.dlx";
            theDialog = theUI.createDialog(theDlxFileName);
            theDialog.addApplyHandler(this);
            theDialog.addOkHandler(this);
            theDialog.addUpdateHandler(this);
            theDialog.addInitializeHandler(this);
            theDialog.addDialogShownHandler(this);
        }
        catch(Exception ex)
        {
            //---- Enter your exception handling code here -----
            throw new Exception(ex);
        }
    }
    //------------------------------- DIALOG LAUNCHING ---------------------------------
    //
    //    Before invoking this application one needs to open any part/empty part in NX
    //    because of the behavior of the blocks.
    //
    //    Make sure the dlx file is in one of the following locations:
    //        1.) From where NX session is launched
    //        2.) $UGII_USER_DIR/application
    //        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    //            recommended. This variable is set to a full directory path to a file 
    //            containing a list of root directories for all custom applications.
    //            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\\ugii\\menus\\custom_dirs.dat
    //
    //    You can create the dialog using one of the following way:
    //
    //    1. USER EXIT
    //
    //        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    //        2) Invoke the Shared Library through File->Execute->NX Open menu.
    //
    //------------------------------------------------------------------------------
    public static void main(String [] argv) throws Exception
    {
        choiceExpression thechoiceExpression = null;
        try
        {
            thechoiceExpression = new choiceExpression();
            // The following method shows the dialog immediately
            thechoiceExpression.show();
        }
        catch(Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("Block Styler", ERROR, ex.getMessage());
        }
        finally
        {
            if(thechoiceExpression != null)
            {
                thechoiceExpression.dispose();
                thechoiceExpression = null;
            }
        }
    }
    
    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    //
    //
    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    //
    //
    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
     public static final int getUnloadOption()
    {
        //return BaseSession.LibraryUnloadOption.EXPLICITLY;
         return BaseSession.LibraryUnloadOption.IMMEDIATELY;
        // return BaseSession.LibraryUnloadOption.AT_TERMINATION;
    }
    
    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    public static void onUnload() throws NXException, RemoteException
    {
        try
        {
        }
        catch(Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("Block Styler", ERROR, ex.getMessage());
        }
    }
    
    //------------------------------------------------------------------------------
    //This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public int show() throws NXException, RemoteException
    {
        try
        {
            theDialog.show();
        }
        catch(Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("Block Styler", ERROR, ex.getMessage());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Method Name: dispose
    //------------------------------------------------------------------------------
    public void dispose() throws NXException, RemoteException
    {
        if(theDialog != null)
        {
            theDialog.dispose();
            theDialog = null;
        }
    }
    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize
    //------------------------------------------------------------------------------
    public void initialize() throws NXException, RemoteException
    {
        try
        {
            group = (nxopen.blockstyler.Group)theDialog.topBlock().findBlock("group");
            expressions = (SetList)theDialog.topBlock().findBlock("expressions");
            add = (Button)theDialog.topBlock().findBlock("add");
            group1 = (nxopen.blockstyler.Group)theDialog.topBlock().findBlock("group1");
            choices = (SetList)theDialog.topBlock().findBlock("choices");
            remove = (Button)theDialog.topBlock().findBlock("remove");
            //------------------------------------------------------------------------------
            //Registration of SetList specific callbacks
            //------------------------------------------------------------------------------
            //expressions.setAddHandler(this);
            
            //expressions.setDeleteHandler(this);
            
            //expressions.setReorderObserver(this);
            
            //choices.setAddHandler(this);
            
            /*choices.setDeleteHandler(new SetList.DeleteCallback() {
                @Override
                public int deleteCallback(SetList setList, UIBlock uiBlock) throws NXException, RemoteException {
                    return 0;
                }
            });*/
            
            //choices.setReorderObserver(this);
            
            //------------------------------------------------------------------------------
        }
        catch(Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("Block Styler", ERROR, ex.getMessage());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    /**
     * //界面加载初始函数
     * @author mumulx
     * @creed: mumulx编写
     * @email: 2606964863@qq.com
     * @date 2020/6/3 23:04
     * @param
     * @return void
     *
     */
    public void dialogShown() throws NXException, RemoteException
    {
        try
        {
            //---- Enter your callback code here -----
            //获取工作部件
            Part work = theSession.parts().work();
            //获取工作部件的表达式
            ExpressionCollection ecs = work.expressions();
            //获取迭代器
            TaggedObjectCollection.Iterator iterator = ecs.iterator();
            //使用迭代器进行迭代
            while (iterator.hasNext()) {
                Expression expression =(Expression) iterator.next();
                //获取表达式的名字
                String name = expression.name();
                //获取表达式的值 要分类型进行获取  最终转为string类型的
                String value = getExpressionValueAsString(expression);
                //获取表达式的类型
                String type = expression.type();
                String[] rows = {name,value,type};
                expressions.setItemText(expressions.addNewSet(false),rows);
            }
        }
        catch(Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("Block Styler", ERROR, ex.getMessage());
        }
    }


    /**
     * 前面那些不变的参数  映射成string
     * @author mumulx
     * @creed: mumulx编写
     * @email: 2606964863@qq.com
     * @date 2020/6/2 15:18
     * @param
     * @return java.lang.StringBuffer
     *
     * 模板文件：
     *
     *
        #! NX/KF 4.0
        DefClass: userdfa (ug_khc %ui_comp);
        (Uncached Name)    checking_process: pass;
        (Name)   Apply_State: Edit;
        (String) Title: "New Template\";
        (String) Cue: "\";
        (List)   TemplateOrder: {};
        (List)   ReferenceSets: {"Entire Part\",
                                 "Entire Part\"};
        (List)   LayerSettings: {"ALL\",
                                 "NC\",
                                 "Curves\",
                                 "NC\",
                                 "Datums\",
                                 "NC\",
                                 "Sheets\",
                                 "NC\",
                                 "Sketches\",
                                 "NC\",
                                 "Solids\",
                                 "NC\"};
        (Boolean Modifiable) firstTime: true;
        (Any Uncached) dropTag:
         @{
            $tag << %ug_findPTSDropTag();
            $tag;
         };
         (Any Uncached) dropInstance:
         @{
            $tag << %ug_findPTSDropInstance();
            $tag;
         };
         (Any Uncached) dropParent:
         @{
            $tag << %ug_findPTSDropParent();
            $tag;
         };
         (Any Uncached) dropPoint:
         @{
            $pt << %ug_findPTSDropPoint();
            $pt;
         };
     */
    public StringBuffer initDfaFile() throws IOException {
        StringBuffer result = new StringBuffer();
        result.append("#! NX/KF 4.0\n");
        result.append("DefClass: userdfa (ug_khc %ui_comp);\n");
        result.append("(Uncached Name)    checking_process: pass;\n");
        result.append("(Name)   Apply_State: Edit;\n");
        result.append("(String) Title: \"New Template\\\";\n");
        result.append("(String) Cue: \"\\\";\n");
        result.append("(List)   TemplateOrder: {};\n");
        result.append("(List)   ReferenceSets: {\"Entire Part\\\", \n");
        result.append("                         \"Entire Part\\\"};\n");
        result.append("(List)   LayerSettings: {\"ALL\\\", \n");
        result.append("                         \"NC\\\", \n");
        result.append("                         \"Curves\\\", \n");
        result.append("                         \"NC\\\", \n");
        result.append("                         \"Datums\\\", \n");
        result.append("                         \"NC\\\", \n");
        result.append("                         \"Sheets\\\", \n");
        result.append("                         \"NC\\\", \n");
        result.append("                         \"Sketches\\\", \n");
        result.append("                         \"NC\\\", \n");
        result.append("                         \"Solids\\\", \n");
        result.append("                         \"NC\\\"};\n");
        result.append("(Boolean Modifiable) firstTime: true;\n");
        result.append("(Any Uncached) dropTag: \n");
        result.append("@{\n");
        result.append("\t$tag << %ug_findPTSDropTag();\n");
        result.append("\t$tag;\n");
        result.append("};\n");
        result.append("(Any Uncached) dropInstance: \n");
        result.append("@{\n");
        result.append("\t$tag << %ug_findPTSDropInstance();\n");
        result.append("\t$tag;\n");
        result.append("};\n");
        result.append("(Any Uncached) dropParent: \n");
        result.append("@{\n");
        result.append("\t$tag << %ug_findPTSDropParent();\n");
        result.append("\t$tag;\n");
        result.append("};\n");
        result.append("(Any Uncached) dropPoint: \n");
        result.append("@{\n");
        result.append("\t$pt << %ug_findPTSDropPoint();\n");
        result.append("\t$pt;\n");
        result.append("};\n");
        result.append("##以上属性均必不可少，否则无法调用此PTS界面\n");
        return result;
    }

    /**
     * 创建 double实数类型的组件
     * @author mumulx
     * @creed: mumulx编写
     * @email: 2606964863@qq.com
     * @date 2020/6/3 23:07
     * @param title
     * @param value
     * @return java.lang.StringBuffer
     *
     * 模板
        (child) block_double://dfa_title
        {
            Class, %ui_comp_double;
            Title,        "Block Length";//title
            value,        0;//value
            MaximumValue, 1.0e19;
            MinimumValue, -1.0e19;
            Width, 0;
            VisibleDecimals, 2;
        };
     *
     */
    public StringBuffer creatDfaDouble(String title, String value) {
        StringBuffer rs = new StringBuffer();
        rs.append("(child) dfa_"+title + ": {\n");
        rs.append("    Class, %ui_comp_double;\n");
        rs.append("    Title,        \"Double_"+title+"\";\n");
        rs.append("    value,        "+value+";\n");
        rs.append("    MaximumValue, 1.0e19;\n");
        rs.append("    MinimumValue, -1.0e19;\n");
        rs.append("    Width, 0;\n");
        rs.append("    VisibleDecimals, 2;\n");
        rs.append("};\n");
        return rs;
    }
    /**
     * 创建string类型组件
     * @author mumulx
     * @creed: mumulx编写
     * @email: 2606964863@qq.com
     * @date 2020/6/3 23:09
     * @param title
     * @param value
     * @return java.lang.StringBuffer
     *
     * 模板
        (Child) block_string: {//dfa_title
            Class, %ui_comp_string;
            value, "";//value
            Title,        "String_q1";
            PresentationStyle, 0;
            MaxTextLength, 0;
            ReadOnlyString, false;
            ListItems, {};
        };
     */
    public StringBuffer createDfaString(String title,String value) {
        StringBuffer rs = new StringBuffer();
        //初始化string类型的值  要加上""  在nx中string类型的需要加上""
        rs.append("(Child) dfa_"+title+": {\n");
        rs.append("    Class, %ui_comp_string;\n");
        rs.append("    Title,        \"String_"+title+"\";\n");
        rs.append("    value, "+value+";\n");
        rs.append("    PresentationStyle, 0;\n");
        rs.append("    MaxTextLength, 0;\n");
        rs.append("    ReadOnlyString, false;\n");
        rs.append("    ListItems, {};\n");
        rs.append("};\n");
        return rs;
    }
    /**
     * 创建Integer类型的组件
     * @author mumulx
     * @creed: mumulx编写
     * @email: 2606964863@qq.com
     * @date 2020/6/3 23:09
     * @param title
     * @param value
     * @return java.lang.StringBuffer
     *
     * 模板
        (Child) block_integer: {
            Class, %ui_comp_integer;
            Title,        "block_integer";
            value, 0;
            MaximumValue, 2^30;
            MinimumValue, -2^30;
            Width, 0;
        };
     */
    public StringBuffer createDfaInteger(String title,String value) {
        StringBuffer rs = new StringBuffer();
        rs.append("(Child) dfa_" + title + ": {\n");
        rs.append("  Class, %ui_comp_integer;\n");
        rs.append("  Title,        \"Integer_"+title+"\";\n");
        rs.append("  value, "+value+";\n");
        rs.append("  MaximumValue, 2^30;\n");
        rs.append("  MinimumValue, -2^30;\n");
        rs.append("  Width, 0;\n");
        rs.append("};\n");
        return rs;
    }
    /**
     * 创建Point类型的组件
     * @author mumulx
     * @creed: mumulx编写
     * @email: 2606964863@qq.com
     * @date 2020/6/3 23:10
     * @param title
     * @param value
     * @return java.lang.StringBuffer
     *
     * 模板
        (Child) block_point: {
            Class, %ui_comp_point;
            Point, point(1.0e19,1.0e19,1.0e19);
            SoUpdateOption, 3;
            Scope, 1;
            NoHandle, False;
            LabelString, "Point";
            GwifType, 0;
            EnableSmartPoint, False;
        };
     */
    public StringBuffer createDfaPoint(String title , String value) {
        StringBuffer rs = new StringBuffer();
        rs.append("(Child) dfa_"+title+": {\n");
        rs.append("  Class, %ui_comp_point;\n");
        rs.append("  Point, "+value+";\n");
        rs.append("  SoUpdateOption, 3;\n");
        rs.append("  Scope, 1;\n");
        rs.append("  NoHandle, False;\n");
        rs.append("  LabelString, \"Point_"+title+"\";\n");
        rs.append("  GwifType, 0;\n");
        rs.append("  EnableSmartPoint, False;\n");
        rs.append("};\n");
        return rs;
    }

    /*创建vector类型的组件*/
    /**
     *
     * @author mumulx
     * @creed: mumulx编写
     * @email: 2606964863@qq.com
     * @date 2020/6/3 23:10
     * @param title
     * @param value
     * @return java.lang.StringBuffer
     *
     * 模板
        (Child) block_vector: {
            Class, %ui_comp_vector;
            Vector, vector(0,0,0);
            Point, point(0,0,0);
            LabelString, "Direction";
            Label, LabelString:;
            DoubleSide, false;
            SoUpdateOption, 3;
            Scope, 1;
        };
     */
    public  StringBuffer createDfaVector(String title,String value) {
        StringBuffer rs = new StringBuffer();
        rs.append("(Child) dfa_"+ title +": {\n");
        rs.append("  Class, %ui_comp_vector;\n");
        rs.append("  Vector, "+value+";\n");
        rs.append("  Point, point(0,0,0);\n");
        rs.append("  LabelString, \"Direction_"+title+"\";\n");
        rs.append("  Label, LabelString:;\n");
        rs.append("  DoubleSide, false;\n");
        rs.append("  SoUpdateOption, 3;\n");
        rs.append("  Scope, 1;\n");
        rs.append("};\n");
        return rs;
    }
    /**
     * 创建boolean类型的组件
     * @author mumulx
     * @creed: mumulx编写
     * @email: 2606964863@qq.com
     * @date 2020/6/3 23:11
     * @param title
     * @param value
     * @return java.lang.StringBuffer
     *
     * 模板
        (Child) block_expression: {
            Class, %ui_comp_toggle;
            value, False;
            Title,        "block_boolean";
        };
     */
    public StringBuffer createDfaBoolean(String title,String value) {
        StringBuffer rs = new StringBuffer();
        rs.append("(Child) dfa_"+title+": {\n");
        rs.append("    Class, %ui_comp_toggle;\n");
        rs.append("    value, "+value+";\n");
        rs.append("    Title, \"Boolean_"+title+"\";\n");
        rs.append("};\n");
        return rs;
    }


    /**
     * 没有找到List类型的组件 因此使用string类型的控件代替
     * @author mumulx
     * @creed: mumulx编写
     * @email: 2606964863@qq.com
     * @date 2020/6/3 23:12
     * @param title
     * @param value
     * @return java.lang.StringBuffer
     * 模板
     *
        (Child) block_list: {
            Class, %ui_comp_string;
            Title,        "block_list";
            value, {};
            PresentationStyle, 0;
            MaxTextLength, 0;
            ReadOnlyString, false;
            ListItems, {};
        };
     */
    public StringBuffer createDfaList(String title, String value) {
        StringBuffer rs = new StringBuffer();
        rs.append("(Child) dfa_"+title+": {\n");
        rs.append("    Class, %ui_comp_string;\n");
        rs.append("    Title,        \"List_"+title+"\";\n");
        rs.append("    value, \""+value+"\";\n");
        rs.append("    PresentationStyle, 0;\n");
        rs.append("    MaxTextLength, 0;\n");
        rs.append("    ReadOnlyString, false;\n");
        rs.append("    ListItems, {};\n");
        rs.append("};\n");
        return rs;
    }

    /**
     * 制作控件  将所有的部件组合起来
     * @author mumulx
     * @creed: mumulx编写
     * @email: 2606964863@qq.com
     * @date 2020/6/3 23:12
     * @param items
     * @return java.lang.StringBuffer
     */
    public StringBuffer createDfaControl(UIBlock[] items) throws NXException, RemoteException {
        StringBuffer rs = new StringBuffer();
        rs.append("(string) title:     \"User Defined PTS Example\";\n");
        rs.append("(string) cue:       \"Modify Block Length\";\n");
        /* 注册组件  变量
        (list) DialogItems: {dfa_p1:,dfa_p2:};
         */
        StringBuffer dialogItems = new StringBuffer();
        dialogItems.append("(list) DialogItems: {");
        for (UIBlock item : items) {
            //获取该表达式的参数
            String[] itemText = choices.getItemText(item);
            String title = itemText[0];
            String value = itemText[1];
            String type = itemText[2];
            //Number、String、Boolean、Integer、Point、Vector、List
            //number类型的表达式控件
            if ("Number".equals(type)) {
                StringBuffer number = creatDfaDouble(title, value);
                dialogItems.append("dfa_"+title+":,");
                rs.append(number);
            } else if ("String".equals(type)) {
                StringBuffer string = createDfaString(title, value);
                dialogItems.append("dfa_"+title+":,");
                rs.append(string);
            }else if ("Boolean".equals(type)) {
                StringBuffer bool = createDfaBoolean(title, value);
                dialogItems.append("dfa_"+title+":,");
                rs.append(bool);
            }else if ("Integer".equals(type)) {
                StringBuffer integer = createDfaInteger(title, value);
                dialogItems.append("dfa_"+title+":,");
                rs.append(integer);
            }else if ("Point".equals(type)) {
                StringBuffer point = createDfaPoint(title, value);
                dialogItems.append("dfa_"+title+":,");
                rs.append(point);
            }else if ("Vector".equals(type)) {
                StringBuffer vector = createDfaVector(title, value);
                dialogItems.append("dfa_"+title+":,");
                rs.append(vector);
            }else if ("List".equals(type)) {//list集合类型 未能实现
                StringBuffer list = createDfaList(title, value);
                dialogItems.append("dfa_"+title+":,");
                rs.append(list);
            }
        }
        //dialogItems的最后一个“,”不去掉也可以
        dialogItems.append("};\n\n");
        rs.append("# 将组件注册到对话框中\n");
        //页面加载时  默认进行求值   不设置应该也可以
        rs.append("(list) demandvalue: {DialogItems:};\n");
        rs.append(dialogItems);
        return rs;
    }
    /**
     * 用于初始化组件的默认值  在用户想要更改值的时候即在Assembly Navigator界面时选择Edit Reusable Component时触发 来为组件进行赋值
     *
     * 主要是用于用户更改表达式值之后的初始化  我们在创建组件的时候对该组件的值进行了初始化，但是 一但更改该值就失效了
     * @author mumulx
     * @creed: mumulx编写
     * @email: 2606964863@qq.com
     * @date 2020/6/3 23:16
     * @param items
     * @return java.lang.StringBuffer
     *
     * 模板
        ( Method Integer ) OnInitialize:( Instance $instance )
        @{
            $value1 << ug_askexpressionvalue_("","p7");
                 # ug_setCacheValue($value1,block_length:,value);这个也可以
                    %ui_comp_setCacheValue(self(), $value1, block_length:, value);
            $value2 << ug_askexpressionvalue_("","p8");
                 %ui_comp_setCacheValue(self(), $value2, block_width:, value);
            0;
        };
     *
     *查询表达式用以初始化控件的值
     *
     * 只有ventor和point的值的属性是别的
     * 其他组件的值的属性都是value
     * ventor：Vector
     * Point ： Point
     */
    public  StringBuffer dfaOnInitialize(UIBlock[] items) throws NXException, RemoteException {
        /* 查询表达式用以初始化控件的值
        *
        * 只有ventor和point的值的属性是别的
        * 其他组件的值的属性都是value
        * ventor：Vector
        * Point ： Point
         */
        StringBuffer onInitialize = new StringBuffer();
        onInitialize.append("( Method Integer ) OnInitialize:( Instance $instance )\n");
        onInitialize.append("@{\n");
        for (int i=0;i<items.length;i++) {
            UIBlock item = items[i];
            String[] itemText = choices.getItemText(item);
            String title = itemText[0];
            String type = itemText[2];
            onInitialize.append("    $value"+i+" << ug_askexpressionvalue_(\"\",\""+title+"\");\n");
            if ("Vector".equals(type)) {
                onInitialize.append("    %ui_comp_setCacheValue(self(), $value"+i+", dfa_"+title+":, Vector);\n");
            } else if ("Point".equals(type)) {
                onInitialize.append("    %ui_comp_setCacheValue(self(), $value"+i+", dfa_"+title+":, Point);\n");
            } else {
                onInitialize.append("    %ui_comp_setCacheValue(self(), $value"+i+", dfa_"+title+":, value);\n");
            }
        }
        onInitialize.append("    0;\n");
        onInitialize.append("};\n");

        //获取表达式的值
        return onInitialize;
    }
    /**
     * 1. 创建组件更新函数    利用用户输入的数据修改表达式的值并更新模型
     * 2. 注册 ok点击事件
     * @author mumulx
     * @creed: mumulx编写
     * @email: 2606964863@qq.com
     * @date 2020/6/3 23:18
     * @param items
     * @return java.lang.StringBuffer
     * 模板  组件更新事件
     *
       ( Method integer) Update:( Instance $instance )
        @{
            IF ( $instance = block_length: ) Then
            @{
                #利用用户输入的数据修改表达式的值并更新模型
                ug_setExpressionValue_("","p7",format("%f",block_length:value:));
                ug_updateKFObjects({});
            }
            Else IF ( $instance = block_width: ) Then
            @{
                #利用用户输入的数据修改表达式的值并更新模型
                ug_setExpressionValue_("","p8",format("%f",block_width:value:));
                ug_updateKFObjects({});
            }
            Else doNoThing;
            0;
        };
     *
     * ok点击事件函数模板
     *
        (uncached string ) on_ok:
        @{
            #也可以使用%ug_JASetExpressionValue("p7","200");修改表达式的值
            ug_setExpressionValue_("","p7",format("%f",block_length:value:));
            ug_setExpressionValue_("","p8",format("%f",block_width:value:));
            ug_updateKFObjects({});
            "";
        };
     */
    public StringBuffer dfaOnUpdate(UIBlock[] items) throws NXException, RemoteException {

        /*注册ok事件*/
        StringBuffer onOk = new StringBuffer();
        onOk.append("(uncached string ) on_ok: \n");
        onOk.append("@{\n");
        /*组件更新事件*/
        StringBuffer rs = new StringBuffer();
        rs.append("( Method integer) Update:( Instance $instance )\n");
        rs.append("@{\n");
        for (int i = 0; i < items.length; i++) {
            UIBlock item = items[i];
            String[] itemText = choices.getItemText(item);
            String title = itemText[0];
            String type = itemText[2];
            //第一个if
            if (i == 0) {
                rs.append("    IF ( $instance = dfa_"+title+": ) Then\n");
                rs.append("    @{\n");
            }else {
                rs.append("    Else IF ( $instance = dfa_"+title+": ) Then\n");
                rs.append("    @{\n");
            }
            /*组件的值的类型不同  表达式 赋值的方式 也不同  关键是将不同类型的组件的值转为string类型的值*/
            if ("Point".equals(type)) {
                rs.append("        ug_setExpressionValue_(\"\",\""+title+"\",ug_pointToString(dfa_"+title+":Point:));\n");
                rs.append("        ug_updateKFObjects({});\n");
                rs.append("    }\n");

                onOk.append("      ug_setExpressionValue_(\"\",\""+title+"\",ug_pointToString(dfa_"+title+":Point:));\n");
            } else if ("Vector".equals(type)) {
                rs.append("        ug_setExpressionValue_(\"\",\""+title+"\",ug_vectorToString(dfa_"+title+":Vector:));\n");
                rs.append("        ug_updateKFObjects({});\n");
                rs.append("    }\n");

                onOk.append("      ug_setExpressionValue_(\"\",\""+title+"\",ug_vectorToString(dfa_"+title+":Vector:));\n");
            }else if ("String".equals(type)) {
                rs.append("        ug_setExpressionValue_(\"\",\""+title+"\",\"~\"\"+dfa_"+title+":value:+\"~\"\");\n");
                rs.append("        ug_updateKFObjects({});\n");
                rs.append("    }\n");

                onOk.append("      ug_setExpressionValue_(\"\",\""+title+"\",\"~\"\"+dfa_"+title+":value:+\"~\"\");\n");
            }else if ("Boolean".equals(type)) {
                /*boolean类型的值转为string 没有函数进行调用  因此需要自己手动 进行判断

                模板
                    ( Method integer) Update:( Instance $instance )
                    @{
                        IF ( $instance = dfa_q2: ) Then
                        @{
                            IF ( dfa_q2:value: = true ) Then @{
                                ug_setExpressionValue_("","q2","true");
                             } Else @{
                                ug_setExpressionValue_("","q2","false");
                             };
                             ug_updateKFObjects({});
                        }
                        Else doNoThing;
                        0;
                    };
                * */
                rs.append("        IF ( dfa_"+title+":value: = true ) Then @{\n");
                rs.append("            ug_setExpressionValue_(\"\",\""+title+"\",\"true\");\n");
                rs.append("        } Else @{\n");
                rs.append("            ug_setExpressionValue_(\"\",\""+title+"\",\"false\");\n");
                rs.append("        };\n");
                rs.append("        ug_updateKFObjects({});\n");
                rs.append("    }\n");

                onOk.append("      IF ( dfa_"+title+":value: = true ) Then @{\n");
                onOk.append("          ug_setExpressionValue_(\"\",\""+title+"\",\"true\");\n");
                onOk.append("      } Else @{\n");
                onOk.append("          ug_setExpressionValue_(\"\",\""+title+"\",\"false\");\n");
                onOk.append("      };\n");

            } else {
                rs.append("        ug_setExpressionValue_(\"\",\""+title+"\",format(\"%f\",dfa_"+title+":value:));\n");
                rs.append("        ug_updateKFObjects({});\n");
                rs.append("    }\n");

                onOk.append("      ug_setExpressionValue_(\"\",\""+title+"\",format(\"%f\",dfa_"+title+":value:));\n");
            }
        }
        rs.append("    Else doNoThing;\n");
        rs.append("    0;\n");
        rs.append("};\n");
        rs.append("# 注册ok事件!\n");
        onOk.append("      ug_updateKFObjects({});\n");
        onOk.append("      \"\";\n");
        onOk.append("};\n");
        rs.append(onOk);
        return rs;
    }
    /**
     * 创建Dfa文件  总体进行装配
     * @author mumulx
     * @creed: mumulx编写
     * @email: 2606964863@qq.com
     * @date 2020/6/2 15:17
     * @param items
     * @return void
     *
     */
    public  StringBuilder creatDfaFile(UIBlock[] items) throws NXException, IOException {
        /*文件总体的字节*/
        StringBuilder builder = new StringBuilder();
        //1. 获取不变的 模板部分
        StringBuffer stringBuffer = initDfaFile();
        builder.append(stringBuffer);
        //2. 制作控件
        StringBuffer dfaControl = createDfaControl(items);

        //3. 查询表达式用以初始化控件的值
        // 在上一步制作控件中已经对值进行了初始化因此不需要额外的赋值
        StringBuffer onInitialize = dfaOnInitialize(items);
        builder.append(onInitialize);
        //4. 注册更新事件   和ok点击事件
        StringBuffer dfaUpdate = dfaOnUpdate(items);
        builder.append(dfaControl);
        builder.append(dfaUpdate);
        return builder;
    }

    //------------------------------------------------------------------------------
    //Callback Name: apply
    //Following callback is associated with the "theDialog" Block.
    //------------------------------------------------------------------------------
    /**
     * 用户点击 页面apply按钮的回调函数   在点击ok按钮时也会调用此函数
     * @author mumulx
     * @creed: mumulx编写
     * @email: 2606964863@qq.com
     * @date 2020/6/3 23:25
     * @param
     * @return int
     */
    public int apply() throws NXException, RemoteException{
        int errorCode = 0;
        try
        {
            //判断用户是否选择的表达式列表
            UIBlock[] items = choices.getItems();
            //用户还没有选择表达式值
            if (items.length <= 0) {
                //抛出异常
                throw new Exception("您还没有选择表达式，请选择至少一个表达式选项！");
            }else {//用户选择了表达式

                //第一步：获取用户选择的表达式数组
                UIBlock[] items1 = choices.getItems();
                //第二步：根据用户选择的表达式创建对应的dfa文件  生成dfa文件
                StringBuilder stringBuilder = creatDfaFile(items1);
                //文件名userdfa.dfa
                //将该文件写入到本地C:\workplace\NX\NXDEV2.0\KFA文件夹中
                File file = new File("C:\\workplace\\NX\\NXDEV2.0\\KFA\\userdfa.dfa");
                if (file.exists()) {
                    file.delete();
                }
                //写文件操作  使用NIO
                RandomAccessFile raf = new RandomAccessFile(file, "rw");
                FileChannel fileChannel = raf.getChannel();
                fileChannel.write(ByteBuffer.wrap(stringBuilder.toString().getBytes()));

                //获取当前工作部件
                Part work = theSession.parts().work();
                //刷新Knowledge Fusion Navigator 加载生成的dfa文件
                work.ruleManager().regenerateAll();
                work.ruleManager().reload(true);
                //创建  dfa文件实例
                //第三步：在目标部件中创建userdfa类的实例；
                work.ruleManager().createDynamicRule("root:", "userdfa", "Child", "{class, userdfa;}", null);

                //第四步：修改目标部件中saveClass?属性的值为true；
                work.ruleManager().createDynamicRule("root:", "saveClass?", "Boolean Uncached Modifiable", "", "true;", "");

                //第五步：修改目标部件中saveClassList属性的值为{modelm006,ug_khc}，即将这两个类保存
                work.ruleManager().createDynamicRule("root:", "saveClassList", "List Uncached Modifiable", "", "{userdfa,ug_khc};", "");

                //第六步：在目标部件中增加如下属性(均为string类型),使NX识别到此部件为PTS模板
                /*
                    work.ruleManager().createDynamicRule("root:", "PTS_CLONE", "String Modifiable", "", "\"true\"", "");
                    work.ruleManager().createDynamicRule("root:", "PTS_DEFAULT_REF_SET", "String Modifiable", "", "\"Entire Part\"", "");
                    work.ruleManager().createDynamicRule("root:", "PTS_MADE_FROM", "String Modifiable", "", name, "");
                    work.ruleManager().createDynamicRule("root:", "PTS_TEMPLATE_PART", "String Modifiable", "", "\"true\"", "");
                */
                //获取文件名
                String name = work.name();
                NXObject [] objects1  = new NXObject[1];
                objects1[0] = work;
                /*部件属性操作
                *
                * 需要创建的属性  值全为string类型的
                *
                * PTS_CLONE              true
                  PTS_DEFAULT_REF_SET    Entire Part
                  PTS_MADE_FROM          _model1.prt(即为目标部件之名称)
                  PTS_TEMPLATE_PART      true
                * */
                AttributePropertiesBuilder apb = theSession.attributeManager().createAttributePropertiesBuilder(work, objects1, AttributePropertiesBuilder.OperationType.NONE);
                apb.setArray(false);
                apb.setTitle("PTS_CLONE");
                apb.setDataType(nxopen.AttributePropertiesBaseBuilder.DataTypeOptions.STRING);
                apb.setStringValue("true");
                apb.createAttribute();

                apb.setTitle("PTS_DEFAULT_REF_SET");
                apb.setStringValue("Entire Part");
                apb.createAttribute();

                apb.setTitle("PTS_MADE_FROM");
                apb.setStringValue(name+".prt");
                apb.createAttribute();

                apb.setTitle("PTS_TEMPLATE_PART");
                apb.setStringValue("true");
                apb.createAttribute();
                //保存部件  否则 在Assembly Navigator中右键不显示"Edit Reusable Component..."
                work.save(nxopen.BasePart.SaveComponents.TRUE, nxopen.BasePart.CloseAfterSave.FALSE);

                //调用ug_invokeClassDialog  kf函数来调出此PTS对话框
                work.ruleManager().createDynamicRule("root:", "ptsInvokeClassDialog", "Any Modifiable", "", "ug_invokeClassDialog( userdfa: )", "");
                int markId1 = theSession.setUndoMark(nxopen.Session.MarkVisibility.VISIBLE, "KF Application Update");
                /*更新部件*/
                work.ruleManager().doKfUpdate(markId1);
                //显示 pts界面  进行show value
                work.ruleManager().evaluateAsString("root:ptsInvokeClassDialog:");
            }
        }
        catch(Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.nxmessageBox().show("Block Styler", ERROR, ex.getMessage());
        }
        return errorCode;
    }
    /**用于获取表达式的值 将值转为string类型的
     *
     * @author mumulx
     * @creed: mumulx编写
     * @email: 2606964863@qq.com
     * @date 2020/6/4 22:50
     * @param expression
     * @return java.lang.String
     *
     */
    public String getExpressionValueAsString(Expression expression) throws NXException, RemoteException {
        //获取表达式的值
        String value = null;

        //获取表达式的类型
        String type = expression.type();
        //Number、String、Boolean、Integer、Point、Vector、List
        if ("Number".equals(type)) {
            value = expression.value()+"";
        } else if ("String".equals(type)) {
            value = expression.stringValue();
            value = "\"" + value + "\"";
        } else if ("Boolean".equals(type)) {
            value = expression.booleanValue()+"";
        }
        else if ("Integer".equals(type)) {
            value = expression.integerValue()+"";
        }
        else if ("Point".equals(type)) {
            Point3d point = expression.pointValue();
            value = "Point(" + point.x + "," + point.y + "," + point.z+")";
        }
        else if ("Vector".equals(type)) {
            Vector3d vector3d = expression.vectorValue();
            value = "Vector(" + vector3d.x + "," + vector3d.y +","+ vector3d.z+")";
            /*处理List类型的集合  暂时功能没有实现*/
        } else if ("List".equals(type)) {
            value = expression.getListValue()+"";
        } else {
            value = "";
        }
        return value;
    }

    /**
     * 将 表达式列表中选中的setList中的数据    增加到已选表达式列表中的setlist中
     * 重点是去重 判断用户选择的数据是否被添加了  被添加了就不要重复添加
     * 没有被添加的话在添加
     * @author mumulx
     * @creed: mumulx编写
     * @email: 2606964863@qq.com
     * @date 2020/6/5 12:54
     * @param selected
     * @return void
     *
     */
    public void addItemToChoices(UIBlock[] selected) throws NXException, RemoteException {
        //用于存储已选表达式列表  的选项  便于判重
        List<String> choicesList = new ArrayList<>();
        //遍历已选表达式列表
        for (UIBlock item : choices.getItems()) {
            //将该选项转为string方便去重 添加到choicesList记录中
            //去重的依据就是转换为string类型之后是否相等
            //string由数组转换之后得到，转换的数据就是setList中的一行的值可以通过getItemText得到
            choicesList.add(Arrays.toString(choices.getItemText(item)));
        }
        //遍历 表达列列表选项
        for (UIBlock item : selected) {
            //将该选项转为string----方便去重
            String s = Arrays.toString(expressions.getItemText(item));
            //如果该表达式没有被添加
            if (!choicesList.contains(s)) {
                //将该表达式添加到choices------list
                choices.setItemText(choices.addNewSet(false),expressions.getItemText(item));
            }
        }
    }
    //------------------------------------------------------------------------------
    //Callback Name: update
    //Following callback is associated with the "theDialog" Block.
    //------------------------------------------------------------------------------
    public int update( UIBlock block) throws NXException, RemoteException
    {
        try
        {
            if(block == expressions)
            {
            //---------Enter your code here-----------
            }//增加按钮 点击
            else if(block == add)
            {
            //---------Enter your code here-----------
                //获得用户选择的表达式列表
                UIBlock[] selected = expressions.getSelected();
                //用户没有选择表达式   就点击了增加按钮  那么就将所有的表达式选项增加到  choice中
                if (selected.length <=0) {
                    //弹出对话框  让用户进行确认
                    NXMessageBox nxMessageBox = theUI.nxmessageBox();
                    /* 1 ：确定
                     * 2 ：取消
                     * */
                    int rs = nxMessageBox.show("警告", QUESTION, "该操作将添加所有表达式选项，确定要添加吗？");
                    if (rs == 1) {
                        //获取表达式列表中的所有的表达式选项 将其增加到 已选表达式列表中
                        addItemToChoices(expressions.getItems());
                    }
                //添加用户指定的表达式选项
                } else {
                    //将选中的表达式增加到 已选表达式列表中
                    addItemToChoices(selected);
                }
            }
            else if(block == choices)
            {
            //---------Enter your code here-----------
            }
            else if(block == remove)//用户点击移除按钮  之后的回调函数
            {
                //获得用户选择的表达式列表
                UIBlock[] selected = choices.getSelected();
                //用户没有选择 要移除的选项  就说明要全部移除
                if (selected.length <= 0) {
                    NXMessageBox nxMessageBox = theUI.nxmessageBox();
                    /* 1 ：确定
                     * 2 ：取消
                     * */
                    int rs = nxMessageBox.show("警告", QUESTION, "该操作将要移除所有已选表达式选项，确定要移除吗？");
                    //移除所有已经选定的  表达式选项
                    if (rs == 1) {
                        //获取列表中的所有元素
                        UIBlock[] items = choices.getItems();
                        //移除列表中的所有数据
                        for (UIBlock item : items) {
                            choices.delete(item);
                        }
                    }
                //移除用户选定的表达式选项
                } else {
                    //移除列表记录
                    for (UIBlock item : selected) {
                        choices.delete(item);
                    }
                }
            //---------Enter your code here-----------
            }
        }
        catch(Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("Block Styler", ERROR, ex.getMessage());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok
    //------------------------------------------------------------------------------
    //点击ok事件  区调用apply事件
    public int ok() throws NXException, RemoteException
    {
        int errorCode = 0;
        try
        {
            //---- Enter your callback code here -----
            //调用apply方法
            errorCode = apply();
        }
        catch(Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.nxmessageBox().show("Block Styler", ERROR, ex.getMessage());
        }
        return errorCode;
    }
    //------------------------------------------------------------------------------
    //SetList specific callbacks
    //------------------------------------------------------------------------------
    //public int addCallback (nxopen.blockstyler.SetList set_list) throws NXException,RemoteException
    //{
    //}
    
    //public int deleteCallback(nxopen.blockstyler.SetList set_list, nxopen.blockstyler.UIBlock blockToDelete) throws NXException,RemoteException
    //{
    //}
    
//    public int reorderCallback(nxopen.blockstyler.SetList set_list, nxopen.blockstyler.UIBlock reorderedBlock,                                                          int oldPosition, int newPosition) throws NXException,RemoteException
//    {
//
//
//    }
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Function Name: GetBlockProperties
    //------------------------------------------------------------------------------
    public PropertyList getBlockProperties(String blockID) throws NXException, RemoteException
    {
        PropertyList plist = null;
        try
        {
            plist = theDialog.getBlockProperties(blockID);
        }
        catch(Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("Block Styler", ERROR, ex.getMessage());
        }
        return plist;
    }
    
}